
R Under development (unstable) (2015-09-24 r69424) -- "Unsuffered Consequences"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # This is file ../spam/tests/math.R
> # This file is part of the spam package, 
> #      http://www.math.uzh.ch/furrer/software/spam/
> # by Reinhard Furrer [aut, cre], Florian Gerber [ctb]
>      
> 
> 
> library( spam, warn.conflict=FALSE)
Loading required package: grid
Spam version 1.3-0 (2015-10-24) is loaded.
Type 'help( Spam)' or 'demo( spam)' for a short introduction 
and overview of this package.
Help for individual functions is also obtained by adding the
suffix '.spam' to the function name, e.g. 'help( chol.spam)'.
> 
> 
> test.for.zero <- function( xtest, xtrue, tol= 1.0e-6, relative=FALSE,
+ tag=NULL){
+   # slightly different test function!
+   if( !is.null(tag)){
+      cat( "testing: ", tag, fill=TRUE)}
+ 
+   denom <- ifelse( relative, mean( abs(c(xtrue))),1.0)
+ 
+   if (any(dim(xtest)!=dim(xtrue)))
+     return( cat("## FAILED dimensions  ", dim(xtest), " and ", dim(xtrue),
+               fill=TRUE))
+   test.value <- sum( abs(c(as.matrix(xtest)) - c( xtrue) ),na.rm=T ) /denom
+   if(   test.value < tol ){
+           cat("** PASSED test at tolerance ", tol, fill=TRUE)}
+   else{ cat( "## FAILED test value = ", test.value, " at tolerance ", tol,
+               fill=TRUE)}
+ 
+ }
> 
> 
> # see Matrix::rsparsematrix
> spam_random <- function(n, m=n, size=min(m-1,4)*n, fill=rnorm, seed=NULL, ...)
+     {
+         if (!is.null(seed)) set.seed(seed)
+         ind <- sample.int((n*m), size=size)
+ #
+ #        as.spam( list(i=(ind %% m)+1, j=(ind %/% n)+1, fill(length(ind), ...)))
+         tmp <- matrix(0,n,m)
+         tmp[ind] <- fill(length( ind), ...)
+         as.spam(tmp)
+     }
> 
> # construct matrices:
> n <- 10
> m <- 5
> 
> set.seed(14)
> tt <- matrix(rnorm(m*n),n,m)
> tt[tt<0] <- 0
> 
> ss <- as.spam(tt)
> spam.options( structurebased=FALSE) # test for equivalence!
> 
> #     ‘Math’ ‘"abs"’, ‘"sign"’, ‘"sqrt"’, ‘"ceiling"’, ‘"floor"’,
> #          ‘"trunc"’, ‘"cummax"’, ‘"cummin"’, ‘"cumprod"’, ‘"cumsum"’,
> #          ‘"log"’, ‘"log10"’, ‘"log2"’, ‘"log1p"’, ‘"acos"’, ‘"acosh"’,
> #          ‘"asin"’, ‘"asinh"’, ‘"atan"’, ‘"atanh"’, ‘"exp"’, ‘"expm1"’,
> #          ‘"cos"’, ‘"cosh"’, ‘"cospi"’, ‘"sin"’, ‘"sinh"’, ‘"sinpi"’,
> #          ‘"tan"’, ‘"tanh"’, ‘"tanpi"’, ‘"gamma"’, ‘"lgamma"’,
> #          ‘"digamma"’, ‘"trigamma"’
> 
> #     ‘Math2’ ‘"round"’, ‘"signif"’
> 
> #     ‘Summary’ ‘"max"’, ‘"min"’, ‘"range"’, ‘"prod"’, ‘"sum"’, ‘"any"’, ‘"all"’
> 
> #
> # !
> A <- diag.spam(4)   ; B <- diag(4)
> test.for.zero(A, B)
** PASSED test at tolerance  1e-06
> test.for.zero(!A, !B)
** PASSED test at tolerance  1e-06
> diag(A)=0  ; diag(B) <- 0
> test.for.zero(!A, !B)
** PASSED test at tolerance  1e-06
> # str(A) # is what needs to be expected...,
> # different to spam:::complement.spam(A)
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> #     ‘Summary’
> test.for.zero(max(ss), max(tt))
** PASSED test at tolerance  1e-06
> test.for.zero(min(ss), min(tt))
** PASSED test at tolerance  1e-06
> test.for.zero(range(ss), range(tt))
** PASSED test at tolerance  1e-06
> test.for.zero(prod(ss), prod(tt))
** PASSED test at tolerance  1e-06
> test.for.zero(sum(ss), sum(tt))
** PASSED test at tolerance  1e-06
> test.for.zero(any(ss), any(tt))
** PASSED test at tolerance  1e-06
Warning message:
In any(tt) : coercing argument of type 'double' to logical
> test.for.zero(all(ss), all(tt))
** PASSED test at tolerance  1e-06
Warning message:
In all(tt) : coercing argument of type 'double' to logical
> 
> #     ‘Math2’
> test.for.zero(round(ss), round(tt))
** PASSED test at tolerance  1e-06
> test.for.zero(signif(ss), signif(tt))
** PASSED test at tolerance  1e-06
> 
> #     ‘Math’ ‘"abs"’, ‘"sign"’, ‘"sqrt"’, ‘"ceiling"’, ‘"floor"’,
> #          ‘"trunc"’, ‘"log1p"’
> #          ‘"asin"’, ‘"asinh"’, ‘"atan"’, ‘"atanh"’, ‘"expm1"’,
> #           ‘"sin"’, ‘"sinh"’, ‘"sinpi"’,
> #          ‘"tan"’, ‘"tanh"’, ‘"tanpi"’,
> 
> #          ‘"cummax"’, ‘"cummin"’, ‘"cumprod"’, ‘"cumsum"’,
> #          ‘"log"’, ‘"log10"’, ‘"log2"’, ‘"acos"’, ‘"acosh"’,
> #          , ‘"exp"’, ‘"cos"’, ‘"cosh"’, ‘"cospi"’
> #           ‘"gamma"’, ‘"lgamma"’,   ‘"digamma"’, ‘"trigamma"’
> 
> 
> test.for.zero(abs(ss), abs(tt))
** PASSED test at tolerance  1e-06
> test.for.zero(cos(ss), cos(tt))
** PASSED test at tolerance  1e-06
> test.for.zero(cosh(ss), cosh(tt))
** PASSED test at tolerance  1e-06
> 
> spam.options( NAOK=TRUE) # test for equivalence!
> 
> 
> test.for.zero(gamma(ss), gamma(tt))  #
** PASSED test at tolerance  1e-06
Warning messages:
1: In gamma(as.matrix(x)) : NaNs produced
2: In gamma(tt) : NaNs produced
> test.for.zero(digamma(ss), digamma(tt)) #
** PASSED test at tolerance  1e-06
Warning messages:
1: In digamma(as.matrix(x)) : NaNs produced
2: In digamma(tt) : NaNs produced
> test.for.zero(trigamma(ss), trigamma(tt))
** PASSED test at tolerance  1e-06
> test.for.zero(exp(ss), exp(tt))
** PASSED test at tolerance  1e-06
> test.for.zero(expm1(ss), expm1(tt))
** PASSED test at tolerance  1e-06
> 
> 
> test.for.zero(log(ss), log(tt))
** PASSED test at tolerance  1e-06
> test.for.zero(cummax(ss), cummax(tt))
** PASSED test at tolerance  1e-06
> 
> for (f in getGroupMembers("Math"))
+     test.for.zero( do.call(f, list(ss)),
+                   do.call(f, list(tt)), tag=f)
testing:  abs
** PASSED test at tolerance  1e-06
testing:  sign
** PASSED test at tolerance  1e-06
testing:  sqrt
** PASSED test at tolerance  1e-06
testing:  ceiling
** PASSED test at tolerance  1e-06
testing:  floor
** PASSED test at tolerance  1e-06
testing:  trunc
** PASSED test at tolerance  1e-06
testing:  cummax
** PASSED test at tolerance  1e-06
testing:  cummin
** PASSED test at tolerance  1e-06
testing:  cumprod
** PASSED test at tolerance  1e-06
testing:  cumsum
** PASSED test at tolerance  1e-06
testing:  exp
** PASSED test at tolerance  1e-06
testing:  expm1
** PASSED test at tolerance  1e-06
testing:  log
** PASSED test at tolerance  1e-06
testing:  log10
** PASSED test at tolerance  1e-06
testing:  log2
** PASSED test at tolerance  1e-06
testing:  log1p
** PASSED test at tolerance  1e-06
testing:  cos
** PASSED test at tolerance  1e-06
testing:  cosh
** PASSED test at tolerance  1e-06
testing:  sin
** PASSED test at tolerance  1e-06
testing:  sinh
** PASSED test at tolerance  1e-06
testing:  tan
** PASSED test at tolerance  1e-06
testing:  tanh
** PASSED test at tolerance  1e-06
testing:  acos
** PASSED test at tolerance  1e-06
testing:  acosh
** PASSED test at tolerance  1e-06
testing:  asin
** PASSED test at tolerance  1e-06
testing:  asinh
** PASSED test at tolerance  1e-06
testing:  atan
** PASSED test at tolerance  1e-06
testing:  atanh
** PASSED test at tolerance  1e-06
testing:  cospi
## FAILED test value =  22  at tolerance  1e-06
testing:  sinpi
** PASSED test at tolerance  1e-06
testing:  tanpi
** PASSED test at tolerance  1e-06
testing:  gamma
** PASSED test at tolerance  1e-06
testing:  lgamma
** PASSED test at tolerance  1e-06
testing:  digamma
** PASSED test at tolerance  1e-06
testing:  trigamma
** PASSED test at tolerance  1e-06
There were 50 or more warnings (use warnings() to see the first 50)
>                   
> 
> 
> 
> 
> spam.options( structurebased=TRUE) # test for equivalence!
> 
> proc.time()
   user  system elapsed 
  0.513   0.019   0.513 
